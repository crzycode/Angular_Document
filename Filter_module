1st create filter module
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormFilterPipePipe } from './form-filter-pipe.pipe';
import { SortPipePipe } from './sort-pipe.pipe';



@NgModule({
  declarations: [
    FormFilterPipePipe,
    SortPipePipe
  ],
  imports: [
    CommonModule
  ],exports:[SortPipePipe,FormFilterPipePipe],providers:[SortPipePipe,FormFilterPipePipe]
})
export class FilterPipeModule { }

2nd create a filter pipe

import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'filter'
})
export class FormFilterPipePipe implements PipeTransform {
  transform(items: any[], searchText: string): any[] {
    if (!items) return [];
    if (!searchText) return items;
  
    return items.filter(item => {
      return Object.keys(item).some(key => {
        return String(item[key]).toLowerCase().includes(searchText.toLowerCase());
      });
    });
   }
}
------------
import { Pipe, PipeTransform } from '@angular/core';

export type SortOrder = 'asc' | 'desc';
@Pipe({
  name: 'sort'
})

export class SortPipePipe implements PipeTransform {
  transform(value: any[], sortOrder: SortOrder | string = 'asc', sortKey?: string): any {
    sortOrder = sortOrder && (sortOrder.toLowerCase() as any);

    if (!value || (sortOrder !== 'asc' && sortOrder !== 'desc')) return value;

    let numberArray = [];
    let stringArray = [];

    if (!sortKey) {
      numberArray = value.filter(item => typeof item === 'number').sort();
      stringArray = value.filter(item => typeof item === 'string').sort();
    } else {
      numberArray = value.filter(item => typeof item[sortKey] === 'number').sort((a, b) => a[sortKey] - b[sortKey]);
      stringArray = value
        .filter(item => typeof item[sortKey] === 'string')
        .sort((a, b) => {
          if (a[sortKey] < b[sortKey]) return -1;
          else if (a[sortKey] > b[sortKey]) return 1;
          else return 0;
        });
    }
    const sorted = numberArray.concat(stringArray);
    return sortOrder === 'asc' ? sorted : sorted.reverse();
  }
}
