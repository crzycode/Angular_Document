//service

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class PagerService {

  constructor() { }
  getPager(totalItems: number, currentPage: number = 1, pageSize: number = 10) {
    // calculate total pages
    let totalPages = Math.ceil(totalItems / pageSize);

    // ensure current page isn't out of range
    if (currentPage < 1) {
      currentPage = 1;
    } else if (currentPage > totalPages) {
      currentPage = totalPages;
    }

    let startPage: number, endPage: number;
    if (totalPages <= 4) {
      // less than 10 total pages so show all
      startPage = 1;
      endPage = totalPages;
    } else {
      // more than 10 total pages so calculate start and end pages
      if (currentPage <= 3) {
        startPage = 1;
        endPage = 4;
      } else if (currentPage + 2 >= totalPages) {
        startPage = totalPages - 3;
        endPage = totalPages;
      } else {
        startPage = currentPage - 2;
        endPage = currentPage + 2;
      }
    }

    // calculate start and end item indexes
    let startIndex = (currentPage - 1) * pageSize;
    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);

    // create an array of pages to ng-repeat in the pager control
    let pages = Array.from(Array(endPage + 1 - startPage).keys()).map(
      (i) => startPage + i
    );

    // return object with all pager properties required by the view
    return {
      totalItems: totalItems,
      currentPage: currentPage,
      pageSize: pageSize,
      totalPages: totalPages,
      startPage: startPage,
      endPage: endPage,
      startIndex: startIndex,
      endIndex: endIndex,
      pages: pages,
    };
  }
}

//ts
setPage(page: number) {
  this.Pager = this.PagerService.getPager(1000,page)
  console.log(this.Pager)
 }

//call in ng oninit
 this.setPage(1);  

//html
   <div class="pager" style="display: flex;">
                        <ul *ngIf="Pager.pages && Pager.pages.length" class="pagination">
                            <li [ngClass]="{disabled:Pager.currentPage === 1}">
                                <a (click)="setPage(1)"><img src="../../assets/Left_arrow.svg" alt=""></a>
                            </li>
                            <li [ngClass]="{disabled:Pager.currentPage === 1}">
                                <a (click)="setPage(Pager.currentPage - 1)"><img src="../../assets/Vector.svg" alt=""></a>
                            </li>
                            <li *ngFor="let page of Pager.pages" [ngClass]="{active_page:Pager.currentPage === page}" class="pager_items" (click)="setPage(page)">
                                <a >{{page}}</a>
                            </li>
                            <li [ngClass]="{disabled:Pager.currentPage === Pager.totalPages}">
                                <a (click)="setPage(Pager.currentPage + 1)"><img src="../../assets/Right_arrow_2.svg" alt=""></a>
                            </li>
                            <li [ngClass]="{disabled:Pager.currentPage === Pager.totalPages}">
                                <a (click)="setPage(Pager.totalPages)"><img src="../../assets/Right_arrow.svg" alt=""></a>
                            </li>
                        </ul>
                    </div>


//css
.pagination{
    display: flex;
    list-style: none;
    align-items: center;
  }
  .pagination li a{
    display: flex;
    align-items: center;
  }
  .active_page{
    background-color: #1E4558; padding: 0px 15px !important; height: 20px; border: unset; outline: unset; color: white; border-radius: 5px; font-weight: 600;
    display: flex;
    align-items: center;
    margin: 0px 10px;
  }
  .pager_items{
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: 600;
   
    border-radius: 5px;
    margin: 0px 5px;
    cursor: pointer;
  }
